# -*- coding: utf-8 -*-
"""OOP_KNN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lrv7PhmJuC6MmWqpPv6yKMC9cJCSWzYv
"""

import pandas as pd
import numpy as np

from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score

class KTerdekat:
    """A class for k-Nearest Neighbors classifier. GUNAKAN OOP BIAR GAMPANG HEHE :D"""

    NORMAL = 1
    DEFAULT = 0

    def __init__(self, src_file, index_awal, n, weights, metric, type_):
        self.src_file = src_file
        self.index_awal = int(index_awal)
        self.n = int(n)
        self.type_ = self.NORMAL if type_ == 'normal' else self.DEFAULT
        self.weights = weights
        self.metric = metric
        self.sc = MinMaxScaler(feature_range=(0, 1))
        self.kNN = None
        self.test_label = None
        self.test_data = None
        self.train_data = None
        self.train_label = None
        self.train_normal_data = None
        self.test_normal_data = None
        self.fitting_data()

    def fitting_data(self):
        """Fitting datanya"""
        dataset = pd.read_csv(self.src_file)
        self.train_data = np.array(dataset)[:, self.index_awal:-1]
        self.train_label = np.array(dataset)[:, -1]
        self.kNN = KNeighborsClassifier(n_neighbors=self.n, weights=self.weights, metric=self.metric)
        if self.type_ == self.NORMAL:
            self.train_normal_data = self.sc.fit_transform(self.train_data)
            self.kNN.fit(self.train_normal_data, self.train_label)
        else:
            self.kNN.fit(self.train_data, self.train_label)

    def train_k(self, test_file):
        """Predict data

        Attribute:
          test_file: string berupa file csv
        """
        dataset = pd.read_csv(test_file)
        self.test_data = np.array(dataset)[:, self.index_awal:-1]
        self.test_label = np.array(dataset)[:, -1]
        if self.type_ == self.NORMAL:
            self.test_normal_data = self.sc.transform(self.test_data)
            return self.kNN.predict(self.test_normal_data)
        else:
            return self.kNN.predict(self.test_data)

    def train_k_input(self):
        """Jika Ingin melakukan Inputan"""
        self._print_test_instructions()
        self._take_user_input()
        return self.kNN.predict(self.sc.transform(np.reshape(self.test_input, (1,-1))))

    def _print_test_instructions(self):
        """INSTRUKSI"""
        print('Instructions for providing test data:')
        print('â€¢ pH: 3 to 9.5')
        print('â€¢ Temperature: 34Â°C to 90Â°C')
        print('â€¢ Taste: 0 (Bad) or 1 (Good)')
        print('â€¢ Odor: 0 (Bad) or 1 (Good)')
        print('â€¢ Fat: 0 (Low) or 1 (High)')
        print('â€¢ Turbidity: 0 (Low) or 1 (High)')
        print('â€¢ Colour: 240 to 255')

    def _take_user_input(self):
        """Inline Input By ME :D PYTHONIC GANG!"""
        self.test_input = list(map(float, input('Enter test data separated by commas (pH, Temp, Taste, Odor, Fat, Turbidity, Colour): ').split()))
        self.test_input = [int(x) if i != 0 else float(x) for i, x in enumerate(self.test_input)]

    def evaluate_accuracy(self, csv):
        """Tes Akurasi"""
        predicted_labels = self.train_k(csv)
        accuracy = accuracy_score(predicted_labels, self.test_label)
        print('Accuracy:', accuracy)
        return predicted_labels



# dataset ðŸ¡¸ milk.csv, ambil train_data & train_label, tampilkan
Milk = KTerdekat('milk.csv', 0, 3, 'distance', 'euclidean', 'normal')
print('Train Data Milk : ', Milk.train_data)
print('\nTrain Label Milk : ', Milk.train_label)

print('\n\n')

# Lakukan normalisasi terhadap train_data dengan metode min-max(0-1)
print('Train Data Normalisasi Milk', Milk.train_normal_data)

print('\n\n')

# Lakukan klasifikasi menggunakan k-NN untuk 1 input data test
predicted_labels_milk = Milk.train_k_input()
print('\nHasil:', predicted_labels_milk)

print('\n\n')

# dataset ðŸ¡¸ milk_training.csv, ambil train_data & train_label, tampilkan
MilkTrain = KTerdekat('milk_training.csv', 0, 3, 'distance', 'euclidean', 'normal')
print('Train Data Milk Training : ', MilkTrain.train_data)
print('\nTrain Label Milk Training : ', MilkTrain.train_label)

print('\n\n')

# Lakukan normalisasi terhadap train_data dengan metode min-max(0-1)
print('Train Data Normalisasi MilkTrain', MilkTrain.train_normal_data)

print('\n\n')

# test_dataset ðŸ¡¸ milk_testing.csv, ambil test_data & test_label, tampilkan
predicted_labels_milk_train = MilkTrain.evaluate_accuracy('milk_testing.csv')


print('Test Data MilkTrain, Testing : ', MilkTrain.test_data)
print('\nTest Label  MilkTrain, Testing : ', MilkTrain.test_label)
print('\n\n')

# Lakukan normalisasi terhadap test_data dengan metode min-max(0-1)


print('Train Data Normalisasi : ', MilkTrain.test_normal_data )
print('\n\n')

# Lakukan klasifikasi menggunakan k-NN untuk test_data, bandingkan hasilnya dengan test_label

print('Hasil:', predicted_labels_milk_train)
print('\n\n')

"""Ada yang sulit kenapa harus gampang :D, pemrograman-tech.blogspot.com




"""

